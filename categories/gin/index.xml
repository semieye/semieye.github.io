<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gin on Nothing lasts forever</title>
    <link>https://semieye.github.io/categories/gin/</link>
    <description>Recent content in Gin on Nothing lasts forever</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <managingEditor>semieye@qq.com (semieye)</managingEditor>
    <webMaster>semieye@qq.com (semieye)</webMaster>
    <lastBuildDate>Fri, 23 Mar 2018 22:40:52 +0800</lastBuildDate>
    
	<atom:link href="https://semieye.github.io/categories/gin/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Gin 源码学习（Gin Limit Middleware）</title>
      <link>https://semieye.github.io/post/2018/03/gin-limit/</link>
      <pubDate>Fri, 23 Mar 2018 22:40:52 +0800</pubDate>
      <author>semieye@qq.com (semieye)</author>
      <guid>https://semieye.github.io/post/2018/03/gin-limit/</guid>
      <description>https://github.com/aviddiviner/gin-limit 请求限制 代码超级简单呐，利用空结构体和缓冲为n的chan做连接限制，请看： func MaxAllowed(n int) gin.HandlerFunc { sem := make(chan struct{}, n) acquire := func() { sem &amp;lt;- struct{}{} } release := func() { &amp;lt;-sem } return func(c *gin.Context) { acquire() // before request</description>
    </item>
    
    <item>
      <title>Gin 源码学习（Gin Cache Middleware）</title>
      <link>https://semieye.github.io/post/2018/03/gin-contrib-cache/</link>
      <pubDate>Fri, 23 Mar 2018 21:55:26 +0800</pubDate>
      <author>semieye@qq.com (semieye)</author>
      <guid>https://semieye.github.io/post/2018/03/gin-contrib-cache/</guid>
      <description>https://github.com/gin-contrib/cache 缓存</description>
    </item>
    
  </channel>
</rss>