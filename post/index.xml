<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Nothing lasts forever</title>
    <link>https://semieye.github.io/post/</link>
    <description>Recent content in Posts on Nothing lasts forever</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <managingEditor>semieye@qq.com (semieye)</managingEditor>
    <webMaster>semieye@qq.com (semieye)</webMaster>
    <lastBuildDate>Fri, 23 Mar 2018 16:29:06 +0800</lastBuildDate>
    
	<atom:link href="https://semieye.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go开源项目（自己整理记录的）</title>
      <link>https://semieye.github.io/post/2018/03/awesome-go-projects/</link>
      <pubDate>Fri, 23 Mar 2018 16:29:06 +0800</pubDate>
      <author>semieye@qq.com (semieye)</author>
      <guid>https://semieye.github.io/post/2018/03/awesome-go-projects/</guid>
      <description>&lt;p&gt;记录一些值得学习的Go开源项目，以下是部分链接，留待以后学习。主要是学习其中的一些中小型项目，学习和借鉴其中蕴含的思想和技术，有些或者直接拿来使用 :-) 。中大型项目例如&lt;code&gt;Docker&lt;/code&gt;、&lt;code&gt;Kubernetes&lt;/code&gt;、&lt;code&gt;etcd&lt;/code&gt;、&lt;code&gt;Flynn&lt;/code&gt;、&lt;code&gt;nsq&lt;/code&gt; 等等…&amp;hellip;，太多太大了，有精力再说，估计没有那么多的时间和精力。
&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>一个适合Go入门者的教程</title>
      <link>https://semieye.github.io/post/2018/03/gobyexample/</link>
      <pubDate>Tue, 27 Mar 2018 09:17:28 +0800</pubDate>
      <author>semieye@qq.com (semieye)</author>
      <guid>https://semieye.github.io/post/2018/03/gobyexample/</guid>
      <description>&lt;p&gt;今天看到一个适合Go初学者、入门者，以及某些记性差的（比如我）一段时间老不用Go开发就忘记了语法，重看语言基础的时候，可以浏览的教程，带示例讲解，注释浅显易懂。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;英文原版： &lt;br /&gt;
&lt;a href=&#34;https://gobyexample.com&#34;&gt;https://gobyexample.com&lt;/a&gt; &lt;br /&gt;
&lt;a href=&#34;https://github.com/mmcgrana/gobyexample&#34;&gt;https://github.com/mmcgrana/gobyexample&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;中文翻译： &lt;br /&gt;
&lt;a href=&#34;https://gobyexample.xgwang.me&#34;&gt;https://gobyexample.xgwang.me&lt;/a&gt; &lt;br /&gt;
&lt;a href=&#34;https://github.com/xg-wang/gobyexample&#34;&gt;https://github.com/xg-wang/gobyexample&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;特此记录，感谢作者，翻译者。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go 源码学习（ go-sse ）</title>
      <link>https://semieye.github.io/post/2018/03/alexandrevicenzi-go-sse/</link>
      <pubDate>Mon, 26 Mar 2018 16:29:26 +0800</pubDate>
      <author>semieye@qq.com (semieye)</author>
      <guid>https://semieye.github.io/post/2018/03/alexandrevicenzi-go-sse/</guid>
      <description>&lt;p&gt;上次学习了&lt;code&gt;gossed&lt;/code&gt; 项目 &lt;strong&gt;&lt;a href=&#34;https://github.com/benas/gossed&#34;&gt;https://github.com/benas/gossed&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;再来学习一下它用到的核心开源库：&lt;strong&gt;&lt;a href=&#34;https://github.com/alexandrevicenzi/go-sse&#34;&gt;https://github.com/alexandrevicenzi/go-sse&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这个项目也是一个Go语言实现SSE的库，按照README里面的说明：支持多通道隔离，广播，自定义&lt;code&gt;headers&lt;/code&gt;，支持&lt;code&gt;Last-Event-ID&lt;/code&gt;，遵循&lt;a href=&#34;https://html.spec.whatwg.org/multipage/server-sent-events.html&#34;&gt;&lt;strong&gt;SSE规范&lt;/strong&gt;&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;这个库主要由三个核心源文件 &lt;code&gt;sse.go&lt;/code&gt;，&lt;code&gt;client.go&lt;/code&gt;，&lt;code&gt;channel.go&lt;/code&gt; 组成，分别完成相应功能，具体看一下代码。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;client.go&lt;/code&gt; 中Client结构，收到http请求后创建：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Client&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;lastEventId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;channel&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;send&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Message&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go 源码学习（ gossed ）</title>
      <link>https://semieye.github.io/post/2018/03/benas-gossed/</link>
      <pubDate>Mon, 26 Mar 2018 15:09:26 +0800</pubDate>
      <author>semieye@qq.com (semieye)</author>
      <guid>https://semieye.github.io/post/2018/03/benas-gossed/</guid>
      <description>&lt;p&gt;上次说到Gin框架中有&lt;code&gt;Server-Send Events&lt;/code&gt;的实现，这次针对SSE又进一步做了些研究，涉及到两个项目，分两篇学习。项目地址：&lt;strong&gt;&lt;a href=&#34;https://github.com/benas/gossed&#34;&gt;https://github.com/benas/gossed&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这个项目是利用&lt;a href=&#34;https://github.com/alexandrevicenzi/go-sse&#34;&gt;&lt;strong&gt;alexandrevicenzi/go-sse&lt;/strong&gt;&lt;/a&gt; 项目来实现将标准输入数据转发给浏览器，这是个有趣的项目，可以用浏览器来实时监控某些你想要监控的数据。:)&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/benas/ssed/master/examples/system-stats/screenshot.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Gin 源码学习（Gin SSE Middleware）</title>
      <link>https://semieye.github.io/post/2018/03/gin-contrib-sse/</link>
      <pubDate>Mon, 26 Mar 2018 10:14:26 +0800</pubDate>
      <author>semieye@qq.com (semieye)</author>
      <guid>https://semieye.github.io/post/2018/03/gin-contrib-sse/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/gin-contrib/sse&#34;&gt;https://github.com/gin-contrib/sse&lt;/a&gt; Server-Send Events&lt;/p&gt;

&lt;p&gt;这个项目是&lt;code&gt;Server-Send Events&lt;/code&gt;协议的Go语言实现，有关&lt;code&gt;Server-Send Events&lt;/code&gt;的知识，可以参看这几个链接：&lt;a href=&#34;https://www.html5rocks.com/en/tutorials/eventsource/basics/&#34;&gt;谷歌HTML5项目网站一篇精彩介绍&lt;/a&gt; 和 &lt;a href=&#34;http://www.ruanyifeng.com/blog/2017/05/server-sent_events.html&#34;&gt;阮一峰的中文教程&lt;/a&gt; ，这是&lt;code&gt;HTML5&lt;/code&gt;的一个技术规范，用于服务器向浏览器单向推送消息，相对于&lt;code&gt;Websocket&lt;/code&gt;协议，更简单和轻量化。&lt;/p&gt;

&lt;p&gt;这个项目被用在了Gin框架之中，用来实现Gin对SSE的支持（&lt;code&gt;c.SSEvent()&lt;/code&gt;）。具体可以参看Gin框架源码中&lt;a href=&#34;https://github.com/gin-gonic/gin/tree/master/examples/realtime-advanced&#34;&gt;实时聊天高级示例&lt;/a&gt; 的代码。&lt;/p&gt;

&lt;p&gt;下面简单分析和记录一下这个库的工作原理。&lt;/p&gt;

&lt;p&gt;Gin中提供了一个方法，支持返回&lt;code&gt;SSEvent&lt;/code&gt;数据，返回的是一个&lt;code&gt;sse.Event&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// SSEvent writes a Server-Sent Event into the body stream.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;SSEvent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;interface&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{})&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Render&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;sse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;Event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;Data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go 源码学习（ go-cache ）</title>
      <link>https://semieye.github.io/post/2018/03/go-cache/</link>
      <pubDate>Sun, 25 Mar 2018 20:36:52 +0800</pubDate>
      <author>semieye@qq.com (semieye)</author>
      <guid>https://semieye.github.io/post/2018/03/go-cache/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/patrickmn/go-cache&#34;&gt;https://github.com/patrickmn/go-cache&lt;/a&gt; 缓存&lt;/p&gt;

&lt;p&gt;上次学习 &lt;a href=&#34;https://github.com/gin-contrib/cache&#34;&gt;&lt;u&gt;gin-contrib/cache&lt;/u&gt; &lt;/a&gt; 的源码时，说到其支持的 &lt;a href=&#34;https://github.com/robfig/go-cache&#34;&gt;&lt;u&gt;go-cache&lt;/u&gt;&lt;/a&gt; 内存缓存，但发现该库最后更新是5、6年前，并且fork自：&lt;a href=&#34;https://github.com/patrickmn/go-cache&#34;&gt;&lt;u&gt;patrickmn/go-cache&lt;/u&gt;&lt;/a&gt; ，而原作者去年仍然在少量更新，并且有一些变化，今天对这个库阅读分析一下。&lt;/p&gt;

&lt;p&gt;这是一个类似于&lt;code&gt;memcached&lt;/code&gt;的&lt;code&gt;key-value&lt;/code&gt;型内存缓存，但并不是独立服务程序，可以被当做一个库编译进程序，适合单机应用，线程安全。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Gin 源码学习（Gin Cache Middleware）</title>
      <link>https://semieye.github.io/post/2018/03/gin-contrib-cache/</link>
      <pubDate>Sat, 24 Mar 2018 18:55:26 +0800</pubDate>
      <author>semieye@qq.com (semieye)</author>
      <guid>https://semieye.github.io/post/2018/03/gin-contrib-cache/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/gin-contrib/cache&#34;&gt;https://github.com/gin-contrib/cache&lt;/a&gt; 缓存&lt;/p&gt;

&lt;!--网易云音乐   &lt;iframe style=&#34;max-width: 100%&#34;
      class=&#34;music163&#34;
      frameborder=&#34;no&#34;
      border=&#34;0&#34;
      marginwidth=&#34;0&#34;
      marginheight=&#34;0&#34;
      width=&#34;330&#34;
      height=&#34;86&#34;
      src=&#34;//music.163.com/outchain/player?type=2&amp;id=28196554&amp;auto=0&amp;height=66&#34;&gt;
    &lt;/iframe&gt;--&gt;

&lt;p&gt;这个项目是Gin的一个Middleware，用于缓存请求结果，目前支持 &lt;a href=&#34;https://github.com/robfig/go-cache&#34;&gt;&lt;u&gt;go-cache&lt;/u&gt;&lt;/a&gt; 内存缓存（ps：这个库最新的应该是这个地址：&lt;a href=&#34;https://github.com/patrickmn/go-cache&#34;&gt;&lt;u&gt;patrickmn/go-cache&lt;/u&gt;&lt;/a&gt;）、&lt;a href=&#34;https://github.com/bradfitz/gomemcache&#34;&gt;&lt;u&gt;memcached&lt;/u&gt;&lt;/a&gt; 缓存、&lt;a href=&#34;https://github.com/garyburd/redigo/redis&#34;&gt;&lt;u&gt;redis&lt;/u&gt;&lt;/a&gt; 缓存三种类型。这三个库以后再阅读学习，今天先完成这个项目的学习。缓存用的key采用&lt;code&gt;urlEscape&lt;/code&gt;函数生成，规则为：前缀+冒号+URL(或其MD5)。&lt;/p&gt;

&lt;p&gt;示例中仅仅给了一个&lt;code&gt;CachePage&lt;/code&gt;的用法：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;	&lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;GET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;/cache_ping&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;cache&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;CachePage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;store&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Minute&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;pong &amp;#34;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Sprint&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;time&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Now&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Unix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()))&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}))&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Gin 源码学习（Gin Limit Middleware）</title>
      <link>https://semieye.github.io/post/2018/03/gin-limit/</link>
      <pubDate>Fri, 23 Mar 2018 22:40:52 +0800</pubDate>
      <author>semieye@qq.com (semieye)</author>
      <guid>https://semieye.github.io/post/2018/03/gin-limit/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/aviddiviner/gin-limit&#34;&gt;https://github.com/aviddiviner/gin-limit&lt;/a&gt; 请求限制&lt;/p&gt;

&lt;p&gt;代码超级简单呐，利用空结构体和缓冲为n的chan做连接限制，请看：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;MaxAllowed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;gin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;HandlerFunc&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;sem&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;chan&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{},&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;acquire&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;sem&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}{}&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;release&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sem&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
	&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;gin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;acquire&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// before request
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;k&#34;&gt;defer&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;release&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// after request
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;		&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>