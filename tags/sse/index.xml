<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sse on Nothing lasts forever</title>
    <link>https://semieye.github.io/tags/sse/</link>
    <description>Recent content in Sse on Nothing lasts forever</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <managingEditor>semieye@qq.com (semieye)</managingEditor>
    <webMaster>semieye@qq.com (semieye)</webMaster>
    <lastBuildDate>Mon, 26 Mar 2018 15:09:26 +0800</lastBuildDate>
    
	<atom:link href="https://semieye.github.io/tags/sse/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go 源码学习（ gossed ）</title>
      <link>https://semieye.github.io/post/2018/03/benas-gossed/</link>
      <pubDate>Mon, 26 Mar 2018 15:09:26 +0800</pubDate>
      <author>semieye@qq.com (semieye)</author>
      <guid>https://semieye.github.io/post/2018/03/benas-gossed/</guid>
      <description>&lt;p&gt;上次说到Gin框架中有&lt;code&gt;Server-Send Events&lt;/code&gt;的实现，这次针对SSE又进一步做了些研究，涉及到两个项目：&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/benas/gossed&#34;&gt;https://github.com/benas/gossed&lt;/a&gt;&lt;/strong&gt;
这个项目是利用下面&lt;code&gt;go-sse&lt;/code&gt; 来实现将标准输入数据转发给浏览器，这是个有趣的项目，可以用浏览器来实时监控某些你想要监控的数据。:)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/alexandrevicenzi/go-sse&#34;&gt;https://github.com/alexandrevicenzi/go-sse&lt;/a&gt;&lt;/strong&gt; 这个项目也是一个Go语言实现SSE的库，按照README里面的说明：支持多通道隔离，广播，自定义headers，支持&lt;code&gt;Last-Event-ID&lt;/code&gt;，遵循&lt;a href=&#34;https://html.spec.whatwg.org/multipage/server-sent-events.html&#34;&gt;&lt;strong&gt;SSE规范&lt;/strong&gt;&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Gin 源码学习（Gin SSE Middleware）</title>
      <link>https://semieye.github.io/post/2018/03/gin-contrib-sse/</link>
      <pubDate>Mon, 26 Mar 2018 10:14:26 +0800</pubDate>
      <author>semieye@qq.com (semieye)</author>
      <guid>https://semieye.github.io/post/2018/03/gin-contrib-sse/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/gin-contrib/sse&#34;&gt;https://github.com/gin-contrib/sse&lt;/a&gt; Server-Send Events&lt;/p&gt;

&lt;p&gt;这个项目是&lt;code&gt;Server-Send Events&lt;/code&gt;协议的Go语言实现，有关&lt;code&gt;Server-Send Events&lt;/code&gt;的知识，可以参看这几个链接：&lt;a href=&#34;https://www.html5rocks.com/en/tutorials/eventsource/basics/&#34;&gt;谷歌HTML5项目网站一篇精彩介绍&lt;/a&gt; 和 &lt;a href=&#34;http://www.ruanyifeng.com/blog/2017/05/server-sent_events.html&#34;&gt;阮一峰的中文教程&lt;/a&gt; ，这是&lt;code&gt;HTML5&lt;/code&gt;的一个技术规范，用于服务器向浏览器单向推送消息，相对于&lt;code&gt;Websocket&lt;/code&gt;协议，更简单和轻量化。&lt;/p&gt;

&lt;p&gt;这个项目被用在了Gin框架之中，用来实现Gin对SSE的支持（&lt;code&gt;c.SSEvent()&lt;/code&gt;）。具体可以参看Gin框架源码中&lt;a href=&#34;https://github.com/gin-gonic/gin/tree/master/examples/realtime-advanced&#34;&gt;实时聊天高级示例&lt;/a&gt; 的代码。&lt;/p&gt;

&lt;p&gt;下面简单分析和记录一下这个库的工作原理。&lt;/p&gt;

&lt;p&gt;Gin中提供了一个方法，支持返回&lt;code&gt;SSEvent&lt;/code&gt;数据，返回的是一个&lt;code&gt;sse.Event&lt;/code&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// SSEvent writes a Server-Sent Event into the body stream.
&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;SSEvent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;interface&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{})&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
	&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Render&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;sse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;Event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
		&lt;span class=&#34;nx&#34;&gt;Data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
	&lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>